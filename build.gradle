buildscript {
    ext.kotlin_version = '1.1.60'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.15"
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.7.3'
}

apply plugin: 'maven-publish'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

group 'com.wenhui'
version '1.0.2'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compileOnly 'com.google.android:android:4.1.1.4'

    testCompile 'junit:junit:4.12'
    //noinspection GradleDependency
    testCompile 'org.assertj:assertj-core:2.8.0'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.8.1'
    testCompile 'org.mockito:mockito-core:2.7.22'
}

// Generate Kotlin doc
dokka {
    outputFormat = 'javadoc'
    outputFormat = 'html'
    outputDirectory = javadoc.destinationDir
}

//required for jcenter
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

//required for jcenter
task javadocJar(type: Jar, dependsOn: dokka) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar //required for jcenter
    archives javadocJar //required for jcenter
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            artifactId 'prioritizeretrofitadapter'
            from components.java
            artifact sourcesJar {
                classifier = 'sources'
            }
            artifact javadocJar {
                classifier = 'javadoc'
            }
        }
    }
}

// To upload a new version
// ./gradlew clean
// ./gradlew build bintrayUpload
bintray {
    def bintrayUser = System.env.BINTRAY_API_USER
    def bintrayApiKey = System.env.BINTRAY_API_KEY
    if (bintrayUser == null || bintrayApiKey == null) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        bintrayUser = properties.getProperty("bintray.user")
        bintrayApiKey = properties.getProperty("bintray.apikey")
    }

    if (bintrayUser == null || bintrayApiKey == null){
        throw new GradleException("Require bintray user and key to publish artifact")
    }

    user = bintrayUser
    key = bintrayApiKey
    publications = ['MyPublication']
    pkg {
        repo = System.env.RELEASE_REPO != null ? System.env.RELEASE_REPO : 'snapshot'
        name = 'prioritizeretrofitadapter'
        desc = 'Adapt Retrofit Call to support request priority'
        licenses = ["Apache-2.0"]
        websiteUrl = "https://github.com/wenhuiyao/PrioritizeRetrofit"
        vcsUrl = "https://github.com/wenhuiyao/PrioritizeRetrofit"
        issueTrackerUrl = "https://github.com/wenhuiyao/PrioritizeRetrofit/issues"
        publish = true
        version {
            name = project.version
            released = new Date()
            vcsTag = "v${project.version}"
        }
    }
}